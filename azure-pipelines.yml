# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#Comment Block: Ctrl + K + C
#UnComment Block: Ctrl + K + U
#Loaded into memory Get-ChildItem -Path Function:\Get-*Version
#Remove functions in Memory Get-ChildItem -Path Function:\Get-*Version | Remove-Item
#Verify functions is removed Get-ChildItem -Path Function:\Get-*Version
#Get-Command -Name Test-MrParameter -Syntax

trigger:
- master

parameters:
- name: name  
  default: 'oss_stage'

variables:
- name: one
  value: initialValue 

pool:
  vmImage: ubuntu-latest

stages:
- stage: ${{ parameters.name }}
  jobs:
  - job: oss_job
    steps:
    - task: CmdLine@2 
      displayName: 'Microsoft Security DevOps' 
      inputs:  
        workingDirectory: $(Build.SourcesDirectory)        
        script: |
          cd $(Build.SourcesDirectory)
          ls
    - script: |
        #az login
        echo ${{ variables.one }} # outputs initialValue
        echo $(one)
      displayName: First variable pass
    - task: PowerShell@2
      inputs:
        targetType: 'inline'      
        script: |          
          $m = New-Module -ScriptBlock {
            function Hello ($name) {
              Write-Output "Hello, $name"
            }
            function Goodbye ($name) {
              Write-Output  "Goodbye, $name"
            }
            function ReadData () {
              $data = @(
                 'Zero'
                 'One'
                 'Two'
                 'Three'             )
              foreach ($d in $data) { 
               try {
                  Write-Verbose -Message "Attempting to perform some action on $d"            
                  Write-Output $d
               }
               catch {
                 Write-Warning -Message "Unable to connect to Computer: $d"
               }          
              }
            }
          } -AsCustomObject
          $m
          $m | Get-Member
          $m.goodbye("Jane")
          $m.hello("Manoj")
          $m.ReadData()
          New-Module -ScriptBlock {
             $SayHelloHelp="Type 'SayHello', a space, and a name."; 
             function SayHello ($name) { 
              "Hello, $name" 
               try
                  {
                    $Response = Invoke-WebRequest -Uri "https://dev.azure.com/niqflex-org/niqflex/_apis/wit/queries?api-version=7.1-preview.2"
                     # This will only execute if the Invoke-WebRequest is successful.
                    $StatusCode = $Response.StatusCode
                  } 
                  catch {
                     $StatusCode = $_.Exception.Response.StatusCode.value__
                  }
                  Write-Output $StatusCode
              }; 
              Export-ModuleMember -function SayHello -Variable SayHelloHelp
          }
          $SayHelloHelp          
          SayHello Jeffrey       
    # - task: AzurePowerShell@5 #Run a PowerShell script within an Azure environment.
    #   inputs:
    #     azureSubscription: ${env:NIQID} #$env:NIQ_ID
    #     azurePowerShellVersion: LatestVersion
    #     ScriptType: 'InlineScript'
    #     Inline: |
    #       # You can write your azure powershell scripts inline here. 
    #       # You can also pass predefined and custom variables to this script using arguments
    #       Write-Host 'Hello'
    #       Write-Host 'World!'
    #   env:
    #     NIQ_ID: ${env:NIQID}
             


